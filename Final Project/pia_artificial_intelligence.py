# -*- coding: utf-8 -*-
"""PIA Artificial Intelligence

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qZ331CasyHGPzpD6Abtes-g1pZlRMbyx

#Brain Tumor Detection using a Convolutional Neural Network
NAOMI IGLESIAS HERNÁNDEZ 1991862
YULISSA PONCE SALAZAR 1894765
LIDIA MARÍA SOTO VALVERDE 1992303
LUIS ANTONIO RAMÍREZ GARZA 1991893
"""

# Importing libraries
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from sklearn.model_selection   import train_test_split
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np
from PIL import Image
from keras.utils import normalize
from keras.models import Sequential
from keras.layers import Conv2D,MaxPool2D,Activation, Dropout, Flatten,Dense

"""#Preprocessing"""

# Import the dataset
from google.colab import files
uploaded= files.upload()

import zipfile
import io
data=zipfile.ZipFile(io.BytesIO(uploaded["archive.zip"]),"r")
data.extractall()

# Rescaling
image_directory="brain_tumor_dataset/"
no_tumor =os.listdir(image_directory+"no/")
yes_tumor =os.listdir(image_directory+"yes/")
dataset=[]
label=[]
print(no_tumor)
print(yes_tumor)
print(len(no_tumor))
print(len(yes_tumor))

for i, image_name in enumerate(no_tumor):
    image=cv2.imread(image_directory+"no/"+image_name)
    image=Image.fromarray(image, "RGB")
    image=image.resize((200,200))
    dataset.append(np.array(image))
    label.append(0)

for i, image_name in enumerate(yes_tumor):
    image=cv2.imread(image_directory+"yes/"+image_name)
    image=Image.fromarray(image, "RGB")
    image=image.resize((200,200))
    dataset.append(np.array(image))
    label.append(1)

print(dataset)
print(len(label))

#Convert to numpy
dataset = np.array(dataset)
label = np.array(label)

# Class definition
class_names = ['NO', 'YES']

"""#Structure and trainning of RNAC"""

#We will split the data: 80% training, 20% validation
train_images, test_images, train_labels, test_labels = train_test_split(dataset, label, test_size= 0.2, random_state= 42)

# Exploring the dataset
print(train_images.shape)
len(train_labels)

train_labels

print(test_images.shape)
len(test_labels)

plt.figure()
plt.imshow(train_images[30])
plt.colorbar()
plt.grid(False)
plt.show()

train_images = train_images/255.0
test_images = test_images/255.0

plt.figure(figsize=(10,10)) # Total dimension
for i in range(50):  # show 25 images
    plt.subplot(10,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

# Convolutional part of RNAC
model = models.Sequential()
model.add(layers.Conv2D (32, (3, 3), activation='relu', input_shape=(200, 200, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D (64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D (64, (3, 3), activation='relu'))

# Classification
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense((2), activation = 'softmax'
))

model.summary()

# Model compilation: features
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# RNAC trainning
history = model.fit(train_images, train_labels, epochs=20,
validation_split= 0.1)

def training_plot(metrics, history):
  f, ax = plt.subplots(1, len(metrics), figsize=(5*len(metrics), 5))
  for idx, metric in enumerate(metrics):
    ax[idx].plot(history.history[metric], ls='dashed')
    ax[idx].set_xlabel("Epochs")
    ax[idx].set_ylabel(metric)
    ax[idx].plot(history.history['val_' + metric]);
    ax[idx].legend([metric, 'val_' + metric])

training_plot(['loss', 'accuracy'], history)

"""#Results of RNAC accuracy"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.4, 1])
plt.xlim([-1, 11])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

model.evaluate(test_images, test_labels)

"""Predictions"""

predictions = model.predict((test_images)>0.5).astype(int).ravel()

test_images.shape, test_labels.shape

for i in range(10):
  x = predictions[i]
  y = test_labels[i]
  print("La red dice que la imagen es clase " + str(x) + " y la clase verdadera es: " + str(y))